on: [push]

name: Continuous integration

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on:
          - ubuntu-latest
        # Windows/macOS have the Docker binary, but no Docker service
        # - windows-latest
        # - macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings -D clippy::pedantic

  build-release-non-windows:
    needs: [check, test, fmt, clippy]
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on:
          - ubuntu-20.04  # 22.04 produces binaries which are not EL8-compatible
          - macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-artifact@v1
        with:
          name: cmdainer-${{ matrix.runs-on }}
          path: target/release/cmdainer

  build-release-windows:
    needs: [check, test, fmt, clippy]
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on:
          - windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-artifact@v1
        with:
          name: cmdainer-${{ matrix.runs-on }}
          path: target/release/cmdainer.exe

  create-release:
    needs: [build-release-non-windows,build-release-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date "+%Y-%m-%d_%H%M")"
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release_${{ steps.date.outputs.date }}
          release_name: Release ${{ steps.date.outputs.date }}
      - name: Download Linux build
        uses: actions/download-artifact@v1
        with:
          name: cmdainer-ubuntu-latest
      - name: Download macOS build
        uses: actions/download-artifact@v1
        with:
          name: cmdainer-macos-latest
      - name: Download Windows build
        uses: actions/download-artifact@v1
        with:
          name: cmdainer-windows-latest
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cmdainer-ubuntu-latest/cmdainer
          asset_name: cmdainer-linux
          asset_content_type: application/x-executable
      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cmdainer-macos-latest/cmdainer
          asset_name: cmdainer-macos
          asset_content_type: application/x-executable
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cmdainer-windows-latest/cmdainer.exe
          asset_name: cmdainer.exe
          asset_content_type: application/x-executable
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
